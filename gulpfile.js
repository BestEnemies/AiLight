/**
 * Ai-Thinker RGBW Light Firmware
 *
 * This file is part of the Ai-Thinker RGBW Light Firmware.
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.

 * Created by Sacha Telgenhof <stelgenhof at gmail dot com>
 * (https://www.sachatelgenhof.nl)
 * Copyright (c) 2016 - 2017 Sacha Telgenhof
 */

const fs = require('fs');
const gulp = require('gulp');
const del = require('del');
const plumber = require('gulp-plumber');
const htmlmin = require('gulp-htmlmin');
const cleancss = require('gulp-clean-css');
const gzip = require('gulp-gzip');
const inline = require('gulp-inline');
const uglify = require('gulp-uglify');
const sass = require('gulp-sass');
const favicon = require('gulp-base64-favicon');
const cssBase64 = require('gulp-css-base64');

const sourceFolder = 'src/';
const targetFolder = 'html/';

// Clean the generated output files
gulp.task('clean', function() {
  del([sourceFolder + 'html.*']);
  del([sourceFolder + '*.html']);
  del([targetFolder + '*.css']);
  return true;
});

// Build the C++ include header file
gulp.task('build', ['html'], function() {
  var source = sourceFolder + 'index.html.gz';
  var destination = sourceFolder + 'html.gz.h';

  var ws = fs.createWriteStream(destination);

  ws.on('error', function(err) {
    console.log(err);
  });

  var data = fs.readFileSync(source);

  ws.write('#define html_gz_len ' + data.length + '\n');
  ws.write('const uint8_t html_gz[] PROGMEM = {');

  for (i = 0; i < data.length; i++) {
    if (i % 1000 === 0) ws.write('\n');
    ws.write('0x' + ('00' + data[i].toString(16)).slice(-2));
    if (i < data.length - 1) ws.write(',');
  }

  ws.write('\n};');
  ws.end();

  // Remove intermediate files
  fs.unlinkSync(source);
  fs.unlinkSync(targetFolder + 'style.css');
});

// Convert the SCSS to CSS
gulp.task('sass', function() {
  return gulp.src(targetFolder + 'style.scss')
    .pipe(plumber())
    .pipe(sass().on('error', sass.logError))
    .pipe(gulp.dest('html'));
});

// Base 64
gulp.task('css', ['sass'], function() {
  return gulp.src(targetFolder + 'style.css')
    .pipe(cssBase64())
    .pipe(gulp.dest('html'));
});

// Process HTML files
gulp.task('html', ['clean', 'css'], function() {
  return gulp.src(targetFolder + '*.html')
    .pipe(favicon())
    .pipe(inline({
      js: function() {
        return uglify({
          mangle: true
        });
      },
      css: [cleancss],
      disabledTypes: ['svg']
    }))
    .pipe(htmlmin({
      collapseWhitespace: true,
      removeComments: true,
      removeEmptyAttributes: true,
      includeAutoGeneratedTags: false,
      minifyCSS: true,
      minifyJS: true
    }))
    .pipe(gzip())
    .pipe(gulp.dest(sourceFolder));
});

// Default task
gulp.task('default', ['build']);
